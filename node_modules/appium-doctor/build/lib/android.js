"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "EnvVarAndPathCheck", {
  enumerable: true,
  get: function () {
    return _env.default;
  }
});
exports.default = exports.OptionalAppBundleCheck = exports.JavaOnPathCheck = exports.AndroidToolCheck = void 0;

require("source-map-support/register");

var _doctor = require("./doctor");

var _utils = require("./utils");

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _env = _interopRequireDefault(require("./env"));

let checks = [];
let javaHome = _appiumSupport.system.isWindows() ? '%JAVA_HOME%' : '$JAVA_HOME';
checks.push(new _env.default('ANDROID_HOME'));
checks.push(new _env.default('JAVA_HOME'));

class JavaOnPathCheck extends _doctor.DoctorCheck {
  async diagnose() {
    if (process.env.JAVA_HOME) {
      let javaHomeBin = _path.default.resolve(process.env.JAVA_HOME, 'bin');

      if (process.env.PATH.indexOf(javaHomeBin) + 1) {
        return (0, _utils.ok)(`Bin directory of ${javaHome} is set`);
      }
    }

    return (0, _utils.nok)(`Bin directory for ${javaHome} is not set`);
  }

  fix() {
    return `Add '${javaHome}${_path.default.sep}bin' to your PATH environment`;
  }

}

exports.JavaOnPathCheck = JavaOnPathCheck;

class AndroidToolCheck extends _doctor.DoctorCheck {
  constructor(toolName, toolPath) {
    super();
    this.toolName = toolName;
    this.toolPath = toolPath;
  }

  async diagnose() {
    if (typeof process.env.ANDROID_HOME === 'undefined') {
      return (0, _utils.nok)(`${this.toolName} could not be found because ANDROID_HOME is NOT set!`);
    }

    let fullPath = _path.default.resolve(process.env.ANDROID_HOME, this.toolPath);

    return (await _appiumSupport.fs.exists(fullPath)) ? (0, _utils.ok)(`${this.toolName} exists at: ${fullPath}`) : (0, _utils.nok)(`${this.toolName} could NOT be found at '${fullPath}'!`);
  }

  fix() {
    if (typeof process.env.ANDROID_HOME === 'undefined') {
      return 'Manually configure ANDROID_HOME and run appium-doctor again.';
    }

    return `Manually install ${this.toolName} and add it to PATH.`;
  }

}

exports.AndroidToolCheck = AndroidToolCheck;
checks.push(new AndroidToolCheck('adb', _path.default.join('platform-tools', _appiumSupport.system.isWindows() ? 'adb.exe' : 'adb')));
checks.push(new AndroidToolCheck('android', _path.default.join('tools', _appiumSupport.system.isWindows() ? 'android.bat' : 'android')));
checks.push(new AndroidToolCheck('emulator', _path.default.join('tools', _appiumSupport.system.isWindows() ? 'emulator.exe' : 'emulator')));
checks.push(new JavaOnPathCheck());

class OptionalAppBundleCheck extends _doctor.DoctorCheck {
  async diagnose() {
    const bundletoolPath = await (0, _utils.resolveExecutablePath)('bundletool.jar');
    return bundletoolPath ? (0, _utils.okOptional)(`bundletool.jar is installed at: ${bundletoolPath}`) : (0, _utils.nokOptional)('bundletool.jar cannot be found');
  }

  async fix() {
    return 'bundletool.jar is used to handle Android App Bundle. Please read http://appium.io/docs/en/writing-running-appium/android/android-appbundle/ to install it' + `${_appiumSupport.system.isWindows() ? '. Also consider adding the ".jar" extension into your PATHEXT environment variable in order to fix the problem for Windows' : ''}`;
  }

}

exports.OptionalAppBundleCheck = OptionalAppBundleCheck;
checks.push(new OptionalAppBundleCheck());
var _default = checks;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hbmRyb2lkLmpzIl0sIm5hbWVzIjpbImNoZWNrcyIsImphdmFIb21lIiwic3lzdGVtIiwiaXNXaW5kb3dzIiwicHVzaCIsIkVudlZhckFuZFBhdGhDaGVjayIsIkphdmFPblBhdGhDaGVjayIsIkRvY3RvckNoZWNrIiwiZGlhZ25vc2UiLCJwcm9jZXNzIiwiZW52IiwiSkFWQV9IT01FIiwiamF2YUhvbWVCaW4iLCJwYXRoIiwicmVzb2x2ZSIsIlBBVEgiLCJpbmRleE9mIiwiZml4Iiwic2VwIiwiQW5kcm9pZFRvb2xDaGVjayIsImNvbnN0cnVjdG9yIiwidG9vbE5hbWUiLCJ0b29sUGF0aCIsIkFORFJPSURfSE9NRSIsImZ1bGxQYXRoIiwiZnMiLCJleGlzdHMiLCJqb2luIiwiT3B0aW9uYWxBcHBCdW5kbGVDaGVjayIsImJ1bmRsZXRvb2xQYXRoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLElBQUlBLE1BQU0sR0FBRyxFQUFiO0FBRUEsSUFBSUMsUUFBUSxHQUFHQyxzQkFBT0MsU0FBUCxLQUFxQixhQUFyQixHQUFxQyxZQUFwRDtBQUVBSCxNQUFNLENBQUNJLElBQVAsQ0FBWSxJQUFJQyxZQUFKLENBQXVCLGNBQXZCLENBQVo7QUFDQUwsTUFBTSxDQUFDSSxJQUFQLENBQVksSUFBSUMsWUFBSixDQUF1QixXQUF2QixDQUFaOztBQUdBLE1BQU1DLGVBQU4sU0FBOEJDLG1CQUE5QixDQUEwQztBQUN4QyxRQUFNQyxRQUFOLEdBQWtCO0FBQ2hCLFFBQUlDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxTQUFoQixFQUEyQjtBQUN6QixVQUFJQyxXQUFXLEdBQUdDLGNBQUtDLE9BQUwsQ0FBYUwsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFNBQXpCLEVBQW9DLEtBQXBDLENBQWxCOztBQUNBLFVBQUlGLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSyxJQUFaLENBQWlCQyxPQUFqQixDQUF5QkosV0FBekIsSUFBd0MsQ0FBNUMsRUFBK0M7QUFDN0MsZUFBTyxlQUFJLG9CQUFtQlgsUUFBUyxTQUFoQyxDQUFQO0FBQ0Q7QUFDRjs7QUFDRCxXQUFPLGdCQUFLLHFCQUFvQkEsUUFBUyxhQUFsQyxDQUFQO0FBQ0Q7O0FBRURnQixFQUFBQSxHQUFHLEdBQUk7QUFDTCxXQUFRLFFBQU9oQixRQUFTLEdBQUVZLGNBQUtLLEdBQUksK0JBQW5DO0FBQ0Q7O0FBYnVDOzs7O0FBaUIxQyxNQUFNQyxnQkFBTixTQUErQlosbUJBQS9CLENBQTJDO0FBQ3pDYSxFQUFBQSxXQUFXLENBQUVDLFFBQUYsRUFBWUMsUUFBWixFQUFzQjtBQUMvQjtBQUNBLFNBQUtELFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQkEsUUFBaEI7QUFDRDs7QUFFRCxRQUFNZCxRQUFOLEdBQWtCO0FBQ2hCLFFBQUksT0FBT0MsT0FBTyxDQUFDQyxHQUFSLENBQVlhLFlBQW5CLEtBQW9DLFdBQXhDLEVBQXFEO0FBQ25ELGFBQU8sZ0JBQUssR0FBRSxLQUFLRixRQUFTLHNEQUFyQixDQUFQO0FBQ0Q7O0FBQ0QsUUFBSUcsUUFBUSxHQUFHWCxjQUFLQyxPQUFMLENBQWFMLE9BQU8sQ0FBQ0MsR0FBUixDQUFZYSxZQUF6QixFQUF1QyxLQUFLRCxRQUE1QyxDQUFmOztBQUNBLFdBQU8sT0FBTUcsa0JBQUdDLE1BQUgsQ0FBVUYsUUFBVixDQUFOLElBQTRCLGVBQUksR0FBRSxLQUFLSCxRQUFTLGVBQWNHLFFBQVMsRUFBM0MsQ0FBNUIsR0FDTCxnQkFBSyxHQUFFLEtBQUtILFFBQVMsMkJBQTBCRyxRQUFTLElBQXhELENBREY7QUFFRDs7QUFFRFAsRUFBQUEsR0FBRyxHQUFJO0FBQ0wsUUFBSSxPQUFPUixPQUFPLENBQUNDLEdBQVIsQ0FBWWEsWUFBbkIsS0FBb0MsV0FBeEMsRUFBcUQ7QUFDbkQsYUFBTyw4REFBUDtBQUNEOztBQUNELFdBQVEsb0JBQW1CLEtBQUtGLFFBQVMsc0JBQXpDO0FBQ0Q7O0FBckJ3Qzs7O0FBdUIzQ3JCLE1BQU0sQ0FBQ0ksSUFBUCxDQUFZLElBQUllLGdCQUFKLENBQXFCLEtBQXJCLEVBQ1ZOLGNBQUtjLElBQUwsQ0FBVSxnQkFBVixFQUE0QnpCLHNCQUFPQyxTQUFQLEtBQXFCLFNBQXJCLEdBQWlDLEtBQTdELENBRFUsQ0FBWjtBQUVBSCxNQUFNLENBQUNJLElBQVAsQ0FBWSxJQUFJZSxnQkFBSixDQUFxQixTQUFyQixFQUNWTixjQUFLYyxJQUFMLENBQVUsT0FBVixFQUFtQnpCLHNCQUFPQyxTQUFQLEtBQXFCLGFBQXJCLEdBQXFDLFNBQXhELENBRFUsQ0FBWjtBQUVBSCxNQUFNLENBQUNJLElBQVAsQ0FBWSxJQUFJZSxnQkFBSixDQUFxQixVQUFyQixFQUNWTixjQUFLYyxJQUFMLENBQVUsT0FBVixFQUFtQnpCLHNCQUFPQyxTQUFQLEtBQXFCLGNBQXJCLEdBQXNDLFVBQXpELENBRFUsQ0FBWjtBQUVBSCxNQUFNLENBQUNJLElBQVAsQ0FBWSxJQUFJRSxlQUFKLEVBQVo7O0FBRUEsTUFBTXNCLHNCQUFOLFNBQXFDckIsbUJBQXJDLENBQWlEO0FBQy9DLFFBQU1DLFFBQU4sR0FBa0I7QUFDaEIsVUFBTXFCLGNBQWMsR0FBRyxNQUFNLGtDQUFzQixnQkFBdEIsQ0FBN0I7QUFDQSxXQUFPQSxjQUFjLEdBQ2pCLHVCQUFZLG1DQUFrQ0EsY0FBZSxFQUE3RCxDQURpQixHQUVqQix3QkFBWSxnQ0FBWixDQUZKO0FBR0Q7O0FBRUQsUUFBTVosR0FBTixHQUFhO0FBQ1gsV0FBTyw4SkFDSixHQUFFZixzQkFBT0MsU0FBUCxLQUFxQiw0SEFBckIsR0FBb0osRUFBRyxFQUQ1SjtBQUVEOztBQVg4Qzs7O0FBYWpESCxNQUFNLENBQUNJLElBQVAsQ0FBWSxJQUFJd0Isc0JBQUosRUFBWjtlQUdlNUIsTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERvY3RvckNoZWNrIH0gZnJvbSAnLi9kb2N0b3InO1xuaW1wb3J0IHsgb2ssIG5vaywgb2tPcHRpb25hbCwgbm9rT3B0aW9uYWwsIHJlc29sdmVFeGVjdXRhYmxlUGF0aCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgZnMsIHN5c3RlbSB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IEVudlZhckFuZFBhdGhDaGVjayBmcm9tICcuL2Vudic7XG5cblxubGV0IGNoZWNrcyA9IFtdO1xuXG5sZXQgamF2YUhvbWUgPSBzeXN0ZW0uaXNXaW5kb3dzKCkgPyAnJUpBVkFfSE9NRSUnIDogJyRKQVZBX0hPTUUnO1xuXG5jaGVja3MucHVzaChuZXcgRW52VmFyQW5kUGF0aENoZWNrKCdBTkRST0lEX0hPTUUnKSk7XG5jaGVja3MucHVzaChuZXcgRW52VmFyQW5kUGF0aENoZWNrKCdKQVZBX0hPTUUnKSk7XG5cbi8vIENoZWNrIHRoYXQgdGhlIFBBVEggaW5jbHVkZXMgdGhlIGpkaydzIGJpbiBkaXJlY3RvcnlcbmNsYXNzIEphdmFPblBhdGhDaGVjayBleHRlbmRzIERvY3RvckNoZWNrIHtcbiAgYXN5bmMgZGlhZ25vc2UgKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgICBpZiAocHJvY2Vzcy5lbnYuSkFWQV9IT01FKSB7XG4gICAgICBsZXQgamF2YUhvbWVCaW4gPSBwYXRoLnJlc29sdmUocHJvY2Vzcy5lbnYuSkFWQV9IT01FLCAnYmluJyk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuUEFUSC5pbmRleE9mKGphdmFIb21lQmluKSArIDEpIHtcbiAgICAgICAgcmV0dXJuIG9rKGBCaW4gZGlyZWN0b3J5IG9mICR7amF2YUhvbWV9IGlzIHNldGApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbm9rKGBCaW4gZGlyZWN0b3J5IGZvciAke2phdmFIb21lfSBpcyBub3Qgc2V0YCk7XG4gIH1cblxuICBmaXggKCkge1xuICAgIHJldHVybiBgQWRkICcke2phdmFIb21lfSR7cGF0aC5zZXB9YmluJyB0byB5b3VyIFBBVEggZW52aXJvbm1lbnRgO1xuICB9XG59XG5cbi8vIENoZWNrIHRvb2xzXG5jbGFzcyBBbmRyb2lkVG9vbENoZWNrIGV4dGVuZHMgRG9jdG9yQ2hlY2sge1xuICBjb25zdHJ1Y3RvciAodG9vbE5hbWUsIHRvb2xQYXRoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnRvb2xOYW1lID0gdG9vbE5hbWU7XG4gICAgdGhpcy50b29sUGF0aCA9IHRvb2xQYXRoO1xuICB9XG5cbiAgYXN5bmMgZGlhZ25vc2UgKCkge1xuICAgIGlmICh0eXBlb2YgcHJvY2Vzcy5lbnYuQU5EUk9JRF9IT01FID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIG5vayhgJHt0aGlzLnRvb2xOYW1lfSBjb3VsZCBub3QgYmUgZm91bmQgYmVjYXVzZSBBTkRST0lEX0hPTUUgaXMgTk9UIHNldCFgKTtcbiAgICB9XG4gICAgbGV0IGZ1bGxQYXRoID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuZW52LkFORFJPSURfSE9NRSwgdGhpcy50b29sUGF0aCk7XG4gICAgcmV0dXJuIGF3YWl0IGZzLmV4aXN0cyhmdWxsUGF0aCkgPyBvayhgJHt0aGlzLnRvb2xOYW1lfSBleGlzdHMgYXQ6ICR7ZnVsbFBhdGh9YCkgOlxuICAgICAgbm9rKGAke3RoaXMudG9vbE5hbWV9IGNvdWxkIE5PVCBiZSBmb3VuZCBhdCAnJHtmdWxsUGF0aH0nIWApO1xuICB9XG5cbiAgZml4ICgpIHtcbiAgICBpZiAodHlwZW9mIHByb2Nlc3MuZW52LkFORFJPSURfSE9NRSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiAnTWFudWFsbHkgY29uZmlndXJlIEFORFJPSURfSE9NRSBhbmQgcnVuIGFwcGl1bS1kb2N0b3IgYWdhaW4uJztcbiAgICB9XG4gICAgcmV0dXJuIGBNYW51YWxseSBpbnN0YWxsICR7dGhpcy50b29sTmFtZX0gYW5kIGFkZCBpdCB0byBQQVRILmA7XG4gIH1cbn1cbmNoZWNrcy5wdXNoKG5ldyBBbmRyb2lkVG9vbENoZWNrKCdhZGInLFxuICBwYXRoLmpvaW4oJ3BsYXRmb3JtLXRvb2xzJywgc3lzdGVtLmlzV2luZG93cygpID8gJ2FkYi5leGUnIDogJ2FkYicpKSk7XG5jaGVja3MucHVzaChuZXcgQW5kcm9pZFRvb2xDaGVjaygnYW5kcm9pZCcsXG4gIHBhdGguam9pbigndG9vbHMnLCBzeXN0ZW0uaXNXaW5kb3dzKCkgPyAnYW5kcm9pZC5iYXQnIDogJ2FuZHJvaWQnKSkpO1xuY2hlY2tzLnB1c2gobmV3IEFuZHJvaWRUb29sQ2hlY2soJ2VtdWxhdG9yJyxcbiAgcGF0aC5qb2luKCd0b29scycsIHN5c3RlbS5pc1dpbmRvd3MoKSA/ICdlbXVsYXRvci5leGUnIDogJ2VtdWxhdG9yJykpKTtcbmNoZWNrcy5wdXNoKG5ldyBKYXZhT25QYXRoQ2hlY2soKSk7XG5cbmNsYXNzIE9wdGlvbmFsQXBwQnVuZGxlQ2hlY2sgZXh0ZW5kcyBEb2N0b3JDaGVjayB7XG4gIGFzeW5jIGRpYWdub3NlICgpIHtcbiAgICBjb25zdCBidW5kbGV0b29sUGF0aCA9IGF3YWl0IHJlc29sdmVFeGVjdXRhYmxlUGF0aCgnYnVuZGxldG9vbC5qYXInKTtcbiAgICByZXR1cm4gYnVuZGxldG9vbFBhdGhcbiAgICAgID8gb2tPcHRpb25hbChgYnVuZGxldG9vbC5qYXIgaXMgaW5zdGFsbGVkIGF0OiAke2J1bmRsZXRvb2xQYXRofWApXG4gICAgICA6IG5va09wdGlvbmFsKCdidW5kbGV0b29sLmphciBjYW5ub3QgYmUgZm91bmQnKTtcbiAgfVxuXG4gIGFzeW5jIGZpeCAoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICAgIHJldHVybiAnYnVuZGxldG9vbC5qYXIgaXMgdXNlZCB0byBoYW5kbGUgQW5kcm9pZCBBcHAgQnVuZGxlLiBQbGVhc2UgcmVhZCBodHRwOi8vYXBwaXVtLmlvL2RvY3MvZW4vd3JpdGluZy1ydW5uaW5nLWFwcGl1bS9hbmRyb2lkL2FuZHJvaWQtYXBwYnVuZGxlLyB0byBpbnN0YWxsIGl0JyArXG4gICAgICBgJHtzeXN0ZW0uaXNXaW5kb3dzKCkgPyAnLiBBbHNvIGNvbnNpZGVyIGFkZGluZyB0aGUgXCIuamFyXCIgZXh0ZW5zaW9uIGludG8geW91ciBQQVRIRVhUIGVudmlyb25tZW50IHZhcmlhYmxlIGluIG9yZGVyIHRvIGZpeCB0aGUgcHJvYmxlbSBmb3IgV2luZG93cycgOiAnJ31gO1xuICB9XG59XG5jaGVja3MucHVzaChuZXcgT3B0aW9uYWxBcHBCdW5kbGVDaGVjaygpKTtcblxuZXhwb3J0IHsgRW52VmFyQW5kUGF0aENoZWNrLCBBbmRyb2lkVG9vbENoZWNrLCBKYXZhT25QYXRoQ2hlY2ssIE9wdGlvbmFsQXBwQnVuZGxlQ2hlY2sgfTtcbmV4cG9ydCBkZWZhdWx0IGNoZWNrcztcbiJdLCJmaWxlIjoibGliL2FuZHJvaWQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
